#version 450

#extension GL_GOOGLE_include_directive: require

#include "Common.h"
#include "Math.glsl"

layout(local_size_x = PRIMITIVE_CULL_WG_SIZE, local_size_y = 1, local_size_z = 1) in;

layout(push_constant) uniform Globals
{
    PushConstants globals;
};

layout(set = 0, binding = 0) readonly buffer Primitives 
{
    Primitive primitives[]; 
};

layout(set = 0, binding = 1) readonly buffer Draws 
{
    Draw draws[]; 
};

layout(set = 0, binding = 2) buffer CommandCount
{
    uint commandCount;
};

layout(set = 0, binding = 3) writeonly buffer IndirectCommands
{
    IndirectCommand indirectCommands[];
};

layout(set = 0, binding = 3) writeonly buffer TaskCommands
{
    TaskCommand taskCommands[];
};

uint calculateLodIndex(Primitive primitive, Draw draw)
{
    vec3 center = (globals.view * vec4(rotateQuat(primitive.center, draw.rotation) * draw.scale + draw.position, 1.0)).xyz;
    float radius = primitive.radius * draw.scale;

    float distanceToSphere = max(length(center) - radius, 0);
    float threshold = distanceToSphere * globals.lodTarget / draw.scale;

    uint lodIndex = 0;

    while (lodIndex < primitive.lodCount - 1 && primitive.lods[lodIndex + 1].error < threshold)
    {
        ++lodIndex;
    }

    return lodIndex;
}

// Each thread processes 1 primitive: selects LOD, does some culling and possibly emits further work
void main()
{
    uint drawIndex = gl_GlobalInvocationID.x;

    if (drawIndex >= globals.drawCount)
    {
        return;
    }
    
    Draw draw = draws[drawIndex];    
    Primitive primitive = primitives[draw.primitiveIndex];    

    uint lodIndex = globals.bUseLod == 1 ? calculateLodIndex(primitive, draw) : 0;
    Lod lod = primitive.lods[lodIndex];

    // TODO: Actual culling logics

    // TODO: Not a push constant - specialization constant is fine here as we use "2 buffers with the same binding hack"
    if (globals.bMeshPipeline == 1)
    {
        // TODO: Does this architecture produce enough work for task shader? (i.e. WGs with small meshlet number)
        // Try another approach with compacting and measure perf difference - kinda hard actually to implement
        uint taskCommandCount = (lod.meshletCount + TASK_WG_SIZE - 1) / TASK_WG_SIZE;
        uint commandIndex = atomicAdd(commandCount, taskCommandCount);

        if (commandIndex + taskCommandCount > PRIMITIVE_CULL_MAX_COMMANDS)
        {
            return;
        }
        
        for (uint i = 0; i < taskCommandCount; ++i)
        {
            uint meshletOffset = lod.meshletOffset + i * TASK_WG_SIZE;
            uint meshletCount = min(lod.meshletCount - i * TASK_WG_SIZE, TASK_WG_SIZE);
            
            taskCommands[commandIndex + i].drawIndex = drawIndex;
            taskCommands[commandIndex + i].meshletOffset = meshletOffset;
            taskCommands[commandIndex + i].meshletCount = meshletCount;            
        }
    }
    else
    {
        uint commandIndex = atomicAdd(commandCount, 1);

        if (commandIndex >= PRIMITIVE_CULL_MAX_COMMANDS)
        {
            return;
        }

        indirectCommands[commandIndex].drawIndex = drawIndex;
        indirectCommands[commandIndex].indexCount = lod.indexCount;
        indirectCommands[commandIndex].instanceCount = 1; // TODO: Real instancing (do i need this?)
        indirectCommands[commandIndex].firstIndex = lod.indexOffset;
        indirectCommands[commandIndex].vertexOffset = primitive.vertexOffset;
        
        // TODO: It's ok only while we don't use instancing
        #if VISUALIZE_LODS
            indirectCommands[commandIndex].firstInstance = lodIndex;
        #else
            indirectCommands[commandIndex].firstInstance = 0;
        #endif
    }    
}
#version 460

#extension GL_EXT_mesh_shader: require
#extension GL_GOOGLE_include_directive: require

#include "Common.h"
#include "Math.glsl"

layout(local_size_x = MESH_WG_SIZE, local_size_y = 1, local_size_z = 1) in;

layout(push_constant) uniform Globals
{
    PushConstants globals;
};

layout(set = 0, binding = 0) readonly buffer Vertices 
{
    Vertex vertices[];
};

layout(set = 0, binding = 1) readonly buffer MeshletData8 
{
    uint8_t meshletData8[];
};

layout(set = 0, binding = 1) readonly buffer MeshletData16 
{
    uint16_t meshletData16[];
};

layout(set = 0, binding = 1) readonly buffer MeshletData32
{
    uint meshletData32[];
};

layout(set = 0, binding = 2) readonly buffer Meshlets 
{
    Meshlet meshlets[];
};

layout(set = 0, binding = 3) readonly buffer Draws 
{
    Draw draws[];
};

layout(triangles, max_vertices = MAX_MESHLET_VERTICES, max_primitives = MAX_MESHLET_TRIANGLES) out;

layout(location = 0) out vec3 outNormal[];
layout(location = 1) out vec4 outTangent[];
layout(location = 2) out vec2 outUv[];
layout(location = 3) out vec4 outColor[];

taskPayloadSharedEXT TaskPayload payload;

// Each mesh shader workgroup processes 1 meshlet in parallel
void main()
{
    uint threadIndex = gl_LocalInvocationIndex;
    uint meshletIndex = payload.meshletOffset + gl_WorkGroupID.x;

    uint dataOffset = meshlets[meshletIndex].dataOffset;
    uint firstVertexOffset = meshlets[meshletIndex].firstVertexOffset;
    bool bShortVertexOffsets = uint(meshlets[meshletIndex].bShortVertexOffsets) == 1;
    uint vertexCount = uint(meshlets[meshletIndex].vertexCount);
    uint triangleCount = uint(meshlets[meshletIndex].triangleCount);

    SetMeshOutputsEXT(vertexCount, triangleCount);

    uint meshletHash = hash(meshletIndex);
    vec3 hashColor = vec3(float(meshletHash & 255), float((meshletHash >> 8) & 255), float((meshletHash >> 16) & 255)) / 255.0;

    for (uint i = threadIndex; i < vertexCount;)
    {
        uint vertexOffset = firstVertexOffset + (bShortVertexOffsets ? uint(meshletData16[dataOffset * 2 + i]) 
            : meshletData32[dataOffset + i]);

        vec3 position = vertices[vertexOffset].posAndU.xyz;
        vec3 normal = vertices[vertexOffset].normalAndV.xyz;
        vec4 tangent = vertices[vertexOffset].tangent;
        vec2 uv = vec2(vertices[vertexOffset].posAndU.w, vertices[vertexOffset].normalAndV.w);
        //vec4 color = vertices[vertexOffset].color;   
        vec4 color = vec4(hashColor, 1.0);

        // TODO: Optimize vertex inputs
        mat4 mvp = globals.projection * globals.view * draws[payload.drawIndex].transform;

        vec4 clip = mvp * vec4(position, 1.0);

        gl_MeshVerticesEXT[i].gl_Position = clip;
        outNormal[i] = normal;
        outTangent[i] = tangent;
        outUv[i] = uv;
        outColor[i] = color;

        #if MAX_MESHLET_VERTICES <= MESH_WG_SIZE
            break;
        #else
            i += MESH_WG_SIZE;
        #endif
    }

    uint firstIndexOffset = dataOffset + (bShortVertexOffsets ? (vertexCount + 1) / 2 : vertexCount);

    for (uint i = threadIndex; i < triangleCount;)
    {
        uint indexOffset = firstIndexOffset * 4 + i * 3;

        uint index1 = uint(meshletData8[indexOffset]);
        uint index2 = uint(meshletData8[indexOffset + 1]);
        uint index3 = uint(meshletData8[indexOffset + 2]);

        gl_PrimitiveTriangleIndicesEXT[i] = uvec3(index1, index2, index3);

        #if MAX_MESHLET_TRIANGLES <= MESH_WG_SIZE
            break;
        #else
            i += MESH_WG_SIZE;
        #endif
    }
}